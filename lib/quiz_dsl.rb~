require "quiz_dsl/version"

module QuizDsl

  	WRONG = false
	RIGHT = true
	# Clase Quiz DSL
	class Quiz
		attr_accessor :name, :questions
		# Recibe el nombre del test y un bloque con las preguntas y sus respuestas
		#
		# Ejemplo de uso:
		# quiz = Quiz.new("Test 1"){ |e|
		# e.question "Pregunta 1",
		# e.wrong => "Respuesta incorrecta 1",
		# e.wrong => "Respuesta incorrecta 2",
		# e.wrong => "Respuesta incorrecta 3",
		# e.wrong => "Respuesta correcta"
		# }
		def initialize(name)
			raise ArgumentError, "El nombre del cuestionario tiene que ser una cadena" unless name.is_a? String
			@count = 0
			@aciertos = 0
			@name = name
			@questions = []
			yield self
		end
		# Preguntas incorrectas
		def wrong
			@count += 1
			[@count, WRONG]
		end
		# Preguntas correctas
		def right
			:right
		end
		# Método que recibe el título de la pregunta y una serie de parámetros como respuestas
		def question(title, anss)
			raise ArgumentError, "El título tiene que ser una cadena" unless title.is_a? String
			answers = []	
			anss.each do |ans|
				a = Answer.new(ans)
				answers << a
			end
			q = Question.new(title, answers)
			questions << q
		end
		# Ejecuta el test por consola
		def run
			puts name
			questions.each do |q|
				puts q
				print "Su respuesta: "
				resp = gets.chomp.to_i
				raise IndexError, "La respuesta debe estar entre 1 y #{q.answers.size}." unless resp <= q.answers.size and resp > 0
				if q.answers[resp-1].state
					puts "Correcto!"
					@aciertos += 1
				else
					correcta = q.answers.select { |ans| ans.state }.first
					puts "Fallo, la respuesta correcta era #{correcta}"
				end
				puts
			end
			puts "Has acertado el #{(@aciertos/questions.size.to_f)*100}% de las preguntas [#{@aciertos} de #{questions.size}]."
		end
		# Representación visual de un Test en forma de String.
		def to_s
			out = name + "\n"
			questions.each do |q|
				out << "#{q}\n"
			end
			out
		end
	end

	# Clase que representa una de pregunta a un test.
	class Question
		attr_accessor :answers, :title

		def initialize(title, anss)
			raise ArgumentError, "El título tiene que ser una cadena" unless title.is_a? String
			@title = title
			@answers = anss
		end
		def to_s
			out = " #{@title}" + "\n"
			i = 1
			answers.each do |a|
				out << " [#{i}] #{a}\n"
				i += 1
			end
			out
		end
	end
	# Clase que representa las respuestas a preguntas de un test.
	class Answer
		attr_reader :state, :value
		def initialize(ans)
			raise ArgumentError, "Se esperaba un dato del tipo Array" unless ans.is_a? Array
			raise IndexError, 'Debe contener dos argumentos ' unless ans.size == 2
			state = ans[0]
			value = ans[1]
			state == :right ? @state = RIGHT : @state = WRONG
			@value = value
		end
		def to_s
			"#{@value}"
		end
	end
end
